name: Test and deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:

  deploy_variables:
    name: Deploy variables to Vercel

    runs-on: ubuntu-latest

    container: python:3.9

    steps:
    - name: Rest API
      run: |
        curl -X POST "https://api.vercel.com/v10/projects/${{secrets.VERCEL_APP}}/env?upsert=true" \
          -H "Authorization: Bearer ${{secrets.VERCEL_TOKEN}}" \
          -d '{
          "key": "TEST_VAR",
          "value": "TEST_VALUE",
          "type": "plain",
          "target": [
            "preview"
          ],
          "gitBranch": "feat-134-deployment"
        }'

  unit_test:
    name: Build and run tests

    runs-on: ubuntu-latest

    container: python:3.9

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5    
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip3 install -r requirements.txt
    - name: Run tests
      run: python -m pytest -v
      env: 
        TELEGRAM_BOT_TOKEN: ${{secrets.TELEGRAM_BOT_TOKEN}}
        TELEGRAM_CHANNEL_ID: ${{secrets.TELEGRAM_CHANNEL_ID}}
        GOOGLE_CALENDAR_ID: ${{secrets.GOOGLE_CALENDAR_ID}}      
        DATABASE_URL: postgres://postgres:postgres@postgres/postgres
        KV_URL: redis://redis:6379
        KV_REST_API_URL: http://redis
        CHECK_KEY: ${{secrets.CHECK_KEY}}
        GOOGLE_KEY: '${{secrets.GOOGLE_KEY}}'

  docker_test:
    name: Build an image and test it
    
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5    
      redis:
        image: redis
        ports:
          - 6379/tcp
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env: 
      DOCKER_IMAGE_TAG: '${{ github.event.repository.name }}:${{ github.run_id }}'
      DOCKER_CONTAINER_NAME: '${{ github.event.repository.name }}_${{ github.run_id }}'

    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: |
        docker build . \
              --file Dockerfile \
              --tag ${DOCKER_IMAGE_TAG,,}
    - name: Run the image - postgres
      run: |
        docker run \
              -d \
              --name ${DOCKER_CONTAINER_NAME,,} \
              --env PORT=5000 \
              --env TELEGRAM_BOT_TOKEN \
              --env TELEGRAM_CHANNEL_ID \
              --env GOOGLE_CALENDAR_ID \
              --env CHECK_KEY \
              --env GOOGLE_KEY \
              --env DATABASE_URL=postgres://postgres:postgres@$(hostname -I | awk '{print $1}'):${{ job.services.postgres.ports[5432] }}/postgres \
              ${DOCKER_IMAGE_TAG,,}
      env:
        TELEGRAM_BOT_TOKEN: ${{secrets.TELEGRAM_BOT_TOKEN}}
        TELEGRAM_CHANNEL_ID: ${{secrets.TELEGRAM_CHANNEL_ID}}
        GOOGLE_CALENDAR_ID: ${{secrets.GOOGLE_CALENDAR_ID}}
        CHECK_KEY: ${{secrets.CHECK_KEY}}
        GOOGLE_KEY: '${{secrets.GOOGLE_KEY}}'
    - name: Prepare the Docker container
      run: |
        docker exec \
              ${DOCKER_CONTAINER_NAME,,} \
              bash -c '\
                apt-get update && \
                apt-get install -y curl'
    - name: Test denied access
      run: |
        HTTP_CODE=$(docker exec \
              ${DOCKER_CONTAINER_NAME,,} \
              bash -c 'curl -sL -o /dev/null -w "%{http_code}" http://localhost:5000/check_events?key=WRONG_KEY' \
        ); \

        if [[ ${HTTP_CODE} -ne 404 ]] ; then
          echo Wrong HTTP code: $HTTP_CODE
          exit 22
        fi
    - name: Test the Docker container
      run: |
        HTTP_CODE=$(docker exec \
              ${DOCKER_CONTAINER_NAME,,} \
              bash -c 'curl -sL -o /dev/null -w "%{http_code}" http://localhost:5000/check_events?key=${CHECK_KEY}' \
        ); \

        if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]] ; then
          echo HTTP code: $HTTP_CODE
          exit 22
        fi
    - name: Test next notification
      run: |
        HTTP_CODE=$(docker exec \
              ${DOCKER_CONTAINER_NAME,,} \
              bash -c 'curl -sL -o /dev/null -w "%{http_code}" http://localhost:5000/' \
        ); \

        if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]] ; then
          echo HTTP code: $HTTP_CODE
          exit 22
        fi

    - name: Clear postgress container
      run: |
        docker logs ${DOCKER_CONTAINER_NAME,,} || true
        docker rm -f ${DOCKER_CONTAINER_NAME,,} || true

    - name: Run the image - redis
      run: |
        docker run \
              -d \
              --name ${DOCKER_CONTAINER_NAME,,} \
              --env PORT=5000 \
              --env TELEGRAM_BOT_TOKEN \
              --env TELEGRAM_CHANNEL_ID \
              --env GOOGLE_CALENDAR_ID \
              --env CHECK_KEY \
              --env GOOGLE_KEY \
              --env KV_URL=redis://$(hostname -I | awk '{print $1}'):${{ job.services.redis.ports[6379] }} \
              --env KV_REST_API_URL=http://redis \
              --env DEPLOY=autotests \
              ${DOCKER_IMAGE_TAG,,}
      env:
        TELEGRAM_BOT_TOKEN: ${{secrets.TELEGRAM_BOT_TOKEN}}
        TELEGRAM_CHANNEL_ID: ${{secrets.TELEGRAM_CHANNEL_ID}}
        GOOGLE_CALENDAR_ID: ${{secrets.GOOGLE_CALENDAR_ID}}
        CHECK_KEY: ${{secrets.CHECK_KEY}}
        GOOGLE_KEY: '${{secrets.GOOGLE_KEY}}'
    - name: Prepare the Docker container
      run: |
        docker exec \
              ${DOCKER_CONTAINER_NAME,,} \
              bash -c '\
                apt-get update && \
                apt-get install -y curl'
    - name: Test denied access
      run: |
        HTTP_CODE=$(docker exec \
              ${DOCKER_CONTAINER_NAME,,} \
              bash -c 'curl -sL -o /dev/null -w "%{http_code}" http://localhost:5000/check_events?key=WRONG_KEY' \
        ); \

        if [[ ${HTTP_CODE} -ne 404 ]] ; then
          echo Wrong HTTP code: $HTTP_CODE
          exit 22
        fi
    - name: Test the Docker container
      run: |
        HTTP_CODE=$(docker exec \
              ${DOCKER_CONTAINER_NAME,,} \
              bash -c 'curl -sL -o /dev/null -w "%{http_code}" http://localhost:5000/check_events?key=${CHECK_KEY}' \
        ); \

        if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]] ; then
          echo HTTP code: $HTTP_CODE
          exit 22
        fi
    - name: Test next notification
      run: |
        HTTP_CODE=$(docker exec \
              ${DOCKER_CONTAINER_NAME,,} \
              bash -c 'curl -sL -o /dev/null -w "%{http_code}" http://localhost:5000/' \
        ); \

        if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]] ; then
          echo HTTP code: $HTTP_CODE
          exit 22
        fi

    - name: Clear all
      if: always()
      run: |
        docker logs ${DOCKER_CONTAINER_NAME,,} || true
        docker rm -f ${DOCKER_CONTAINER_NAME,,} || true
        docker rmi ${DOCKER_IMAGE_TAG,,} || true
        
  deploy:
    name: Deploy to Heroku
    
    if: false && (
        github.ref == 'refs/heads/main' ||
        github.ref == 'refs/heads/develop'
      )
    
    needs: [unit_test, docker_test]
    
    environment: ${{ github.ref == 'refs/heads/main' && 'main' || 'develop' }}
    
    runs-on: ubuntu-latest
        
    steps:
    - uses: actions/checkout@v3
    - name: Deploy
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: ${{secrets.HEROKU_APP}}
        heroku_email: ${{secrets.HEROKU_EMAIL}}
        usedocker: true
      env:
        HD_TELEGRAM_BOT_TOKEN: ${{secrets.TELEGRAM_BOT_TOKEN}}
        HD_TELEGRAM_CHANNEL_ID: ${{secrets.TELEGRAM_CHANNEL_ID}}
        HD_GOOGLE_CALENDAR_ID: ${{secrets.GOOGLE_CALENDAR_ID}}
        HD_CHECK_KEY: ${{secrets.CHECK_KEY}}
        HD_GOOGLE_KEY: '${{secrets.GOOGLE_KEY}}'

  cronjob:
    name: Create cronjob

    if: github.ref == 'refs/heads/main' ||
        github.ref == 'refs/heads/develop'

    needs: [deploy]

    environment: ${{ github.ref == 'refs/heads/main' && 'main' || 'develop' }}

    runs-on: ubuntu-latest

    container: python:3.9

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip3 install -r .github/tools/requirements.txt
    - name: Create cronjob
      run: python3 .github/tools/create_cronjob.py --title "$TITLE" --url $APP_URL --hours 9 12 21
      env:
        APP_URL: https://${{secrets.HEROKU_APP}}.herokuapp.com/check_events?key=${{secrets.CHECK_KEY}}
        TITLE: Heroku app ${{secrets.HEROKU_APP}} job from github
        CRONJOB_API_KEY: ${{secrets.CRONJOB_API_KEY}}

  cronjob_vercel:
    name: Create Vercel cronjob

    if: github.ref == 'refs/heads/main' ||
        github.ref == 'refs/heads/develop'

    needs: [unit_test, docker_test]

    environment: ${{ github.ref == 'refs/heads/main' && 'main' || 'develop' }}

    runs-on: ubuntu-latest

    container: python:3.9

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip3 install -r .github/tools/requirements.txt
    - name: Create Vercel cronjob
      run: python3 .github/tools/create_cronjob.py --title "$TITLE" --url $APP_URL --hours 9 12 21
      env:
        APP_URL: https://${{secrets.VERCEL_APP}}.vercel.app/check_events?key=${{secrets.CHECK_KEY}}
        TITLE: Vercel app ${{secrets.VERCEL_APP}} job from github
        CRONJOB_API_KEY: ${{secrets.CRONJOB_API_KEY}}
