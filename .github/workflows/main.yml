name: Test and deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:

  unit_test:
    name: Build and run tests
    
    runs-on: ubuntu-latest
    
    container: python:3.7.12
    
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5    
    
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip3 install -r requirements.txt
    - name: Create Google API key
      run: |
        mkdir key
        cat > key/civil-hash.json <<- END_OF_KEY
        ${{secrets.GOOGLE_KEY}}
        END_OF_KEY
    - name: Run tests
      run: python -m pytest -v
      env: 
        TELEGRAM_BOT_TOKEN: ${{secrets.TELEGRAM_BOT_TOKEN}}
        TELEGRAM_CHANNEL_ID: ${{secrets.TELEGRAM_CHANNEL_TEST_ID}}
        GOOGLE_CALENDAR_ID: ${{secrets.GOOGLE_CALENDAR_ID}}      
        DATABASE_URL: postgres://postgres:postgres@postgres/postgres
    - name: Clear all
      if: always()
      run: |
        rm key/civil-hash.json || true

  docker_test:
    name: Build an image and test it
    
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5    
    env: 
      DOCKER_IMAGE_TAG: '${{ github.event.repository.name }}:${{ github.run_id }}'
      DOCKER_CONTAINER_NAME: '${{ github.event.repository.name }}_${{ github.run_id }}'

    steps:
    - uses: actions/checkout@v3
    - name: Create Google API key
      run: |
        mkdir key
        cat > key/civil-hash.json <<- END_OF_KEY
        ${{secrets.GOOGLE_KEY}}
        END_OF_KEY
    - name: Build the Docker image
      run: |
        docker build . \
              --file Dockerfile \
              --tag ${DOCKER_IMAGE_TAG,,}
    - name: Run the image and prepare the Docker container
      run: |
        docker run \
              -d --rm \
              --name ${DOCKER_CONTAINER_NAME,,} \
              --env PORT=5000 \
              --env TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN \
              --env TELEGRAM_CHANNEL_ID=$TELEGRAM_CHANNEL_ID \
              --env GOOGLE_CALENDAR_ID=$GOOGLE_CALENDAR_ID \
              --env DATABASE_URL=postgres://postgres:postgres@$(hostname -I | awk '{print $1}'):${{ job.services.postgres.ports[5432] }}/postgres \
              ${DOCKER_IMAGE_TAG,,}
        docker exec \
              ${DOCKER_CONTAINER_NAME,,} \
              bash -c '\
                apt-get update && \
                apt-get install -y curl'
        docker ps
      env: 
        TELEGRAM_BOT_TOKEN: ${{secrets.TELEGRAM_BOT_TOKEN}}
        TELEGRAM_CHANNEL_ID: ${{secrets.TELEGRAM_CHANNEL_TEST_ID}}
        GOOGLE_CALENDAR_ID: ${{secrets.GOOGLE_CALENDAR_ID}}      
    - name: Test the Docker container
      run: |
        HTTP_CODE=$(docker exec \
              ${DOCKER_CONTAINER_NAME,,} \
              bash -c 'curl -sL -o /dev/null -w "%{http_code}" http://localhost:5000/' \
        ); \
        
        if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]] ; then
          echo HTTP code: $HTTP_CODE
          docker logs ${DOCKER_CONTAINER_NAME,,}
          exit 22
        fi
    - name: Clear all
      if: always()
      run: |
        rm key/civil-hash.json || true
        docker stop ${DOCKER_CONTAINER_NAME,,} || true
        docker rmi ${DOCKER_IMAGE_TAG,,}
        
  deploy:
    name: Deploy to Heroku
    
    if: github.ref == 'refs/heads/main' || 
        github.ref == 'refs/heads/develop'
    
    needs: [unit_test, docker_test]
    
    runs-on: ubuntu-latest
        
    steps:
    - uses: actions/checkout@v3
    - name: Create Google API key
      run: |
        mkdir key
        cat > key/civil-hash.json <<- END_OF_KEY
        ${{secrets.GOOGLE_KEY}}
        END_OF_KEY
    - name: Deploy
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: ${{ github.ref == 'refs/heads/main' && 'tbgc' || 'tbgc-dev' }}
        heroku_email: ${{secrets.HEROKU_EMAIL}}
        usedocker: true
      env:
        HD_TELEGRAM_BOT_TOKEN: ${{secrets.TELEGRAM_BOT_TOKEN}}
        HD_TELEGRAM_CHANNEL_ID: ${{ github.ref == 'refs/heads/main' && secrets.TELEGRAM_CHANNEL_ID || secrets.TELEGRAM_CHANNEL_DEV_ID }}
        HD_GOOGLE_CALENDAR_ID: ${{secrets.GOOGLE_CALENDAR_ID}}
    - name: Clear all
      if: always()
      run: |
        rm key/civil-hash.json || true
